// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package query

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ProviderName string

const (
	ProviderNameGithub ProviderName = "github"
	ProviderNameGoogle ProviderName = "google"
)

func (e *ProviderName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProviderName(s)
	case string:
		*e = ProviderName(s)
	default:
		return fmt.Errorf("unsupported scan type for ProviderName: %T", src)
	}
	return nil
}

type NullProviderName struct {
	ProviderName ProviderName
	Valid        bool // Valid is true if ProviderName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProviderName) Scan(value interface{}) error {
	if value == nil {
		ns.ProviderName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProviderName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProviderName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProviderName), nil
}

type Session struct {
	ID        string
	UserID    pgtype.UUID
	ExpiresAt pgtype.Timestamptz
}

type Todo struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	TodoText  string
	Done      pgtype.Bool
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type User struct {
	ID             pgtype.UUID
	Username       string
	AvatarUrl      pgtype.Text
	ProviderUserID string
	ProviderName   ProviderName
}
