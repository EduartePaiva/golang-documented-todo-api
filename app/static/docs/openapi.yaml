openapi: 3.1.0
info:
  title: Todo List API with Authentication
  version: 1.0.0
  description: A Todo Backend that Will have authentication with OAuth2.0
  contact:
    name: Eduarte
servers:
  - url: http://localhost:3000/api/v1
    description: Development server

paths:
  /:
    get:
      summary: Hello world path
      description: Returns hello world
      responses:
        "200":
          description: Hello world
          content:
            text/plain:
              schema:
                type: string
              example: "Hello, world"
  /docs/openapi.yaml:
    get:
      tags:
        - Docs
      summary: Documentation file
      description: show the raw yaml file of the documentation
      responses:
        "200":
          description: openapi doc
          content:
            text/plain:
              schema:
                type: string
              example: |
                openapi: 3.1.0
                info:
                  title: Todo List API with Authentication
                  version:  1.0.0
                  description: A Todo Backend that Will have authentication with OAuth2.0
                  contact:
                    name: Eduarte
                servers:
                  - url: http://localhost:3000/api/v1
                    description: Development server
  /docs/reference:
    get:
      tags:
        - Docs
      summary: Reference page
      description: show a nice scalar ui for the openapi docs
      responses:
        "200":
          description: gets a html page
          content:
            text/html:
              schema:
                type: "string"
              example: "<html></html>"
  /tasks:
    get:
      tags:
        - Todo
      responses:
        "200":
          description: The list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      examples: [8631fdef-236f-46da-8600-25b60f92c091]
                    text:
                      type: string
                      examples: [I have to do the dishes]
                    done:
                      type: boolean
                      examples: [false]
                    updatedAt:
                      type: string
                    createdAt:
                      type: string
                  required: [id, text, done, updatedAt, createdAt]
    post:
      tags:
        - Todo
      requestBody:
        description: |
          Accept an array of tasks to update or create.   
          If the task id already exists in the database,  
          instead of creating a new one it'll update the existing one.
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    examples: [8631fdef-236f-46da-8600-25b60f92c091]
                  text:
                    type: string
                    minLength: 2
                    maxLength: 500
                  done:
                    type: boolean
                  updatedAt:
                    type: string
                required: [text, id, done, updatedAt]
      responses:
        "200":
          description: The created task
          content:
            text/plain:
              example: tasks created
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
              example: Unauthorized
        "400":
          description: Bad request, happens if the data that the user sent is invalid.
          content:
            text/plain:
              schema:
                type: string
              example: bad request
  /tasks/{id}:
    get:
      tags:
        - Todo
      parameters:
        - schema:
            type: number
          required: true
          name: id
          in: path
          example: 123456
      responses:
        "200":
          description: The selected task
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    minimum: -9007199254740991
                    maximum: 9007199254740991
                  name:
                    type: string
                  done:
                    type: boolean
                    examples:
                      - false
                  updatedAt:
                    type: string
                  createdAt:
                    type: string
                required: [id, name, done, updatedAt, createdAt]
        "404":
          description: Task not found
          content:
            text/plain:
              schema:
                type: string
              example: Not Found
    patch:
      tags:
        - Todo
      requestBody:
        description: |
          Accept a done value or a text value, or both. And the updatedAt field is required
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  minLength: 2
                  maxLength: 500
                done:
                  type: boolean
                updatedAt:
                  type: string
              required: [updatedAt]
      parameters:
        - schema:
            type: string
          required: true
          name: id
          in: path
          example: 8631fdef-236f-46da-8600-25b60f92c091
      responses:
        "204":
          description: The task was updated
          content:
            text/plain:
              example: No Content
        "400":
          description: If a malformed data is found
          content:
            text/plain:
              example: Bad Request
        "401":
          description: User not authenticated
          content:
            text/plain:
              schema:
                type: string
              example: Unauthorized
        "404":
          description: Task not found
          content:
            text/plain:
              schema:
                type: string
              example: Not Found
        "500":
          description: internal server error
          content:
            text/plain:
              schema:
                type: string
              example: internal server error
    delete:
      tags:
        - Todo
      parameters:
        - schema:
            type: string
          required: true
          name: id
          in: path
          example: 8631fdef-236f-46da-8600-25b60f92c091
      responses:
        "204":
          description: The selected task was deleted
          content:
            text/plain:
              example: No Content
        "400":
          description: If a malformed data is found
          content:
            text/plain:
              example: Bad Request
        "401":
          description: User not authenticated
          content:
            text/plain:
              schema:
                type: string
              example: Unauthorized
        "404":
          description: Task not found
          content:
            text/plain:
              schema:
                type: string
              example: Not Found
        "500":
          description: internal server error
          content:
            text/plain:
              schema:
                type: string
              example: internal server error
  /login/github:
    get:
      tags: [Auth]
      description: Set the state in the cookie and redirect the user to the oAuth url
      responses:
        302:
          description: redirect
          headers:
            Location:
              description: https://github.com/login/oauth/authorize?response_type=code&client_id=some_id&state=123456&scope=&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fapi%2Fv1%2Flogin%2Fgithub%2Fcallback
              schema:
                type: string
  /login/github/callback:
    get:
      tags: [Auth]
      description: "Callback auth flow"
      parameters:
        - name: state
          in: query
          required: true
          schema:
            default: same_state
            type: string
            description: The state that was generated in /login/github
        - name: code
          in: query
          required: true
          schema:
            default: 123456
            type: string
            description: The code that will be used to get the accessToken
        - name: github_oauth_state
          in: cookie
          required: true
          schema:
            default: same_state
            type: string
            description: This state have to match the query state
      responses:
        400:
          description: "If any error happens in the auth flow"
          content:
            text/plain:
              example: Bad Request
        302:
          description: Redirects to the homepage after a successful login
          headers:
            Location:
              description: /
              schema:
                type: string
            Set-Cookie:
              description: The session cookie being set.
              schema:
                type: string
                example: session=abc123; Path=/; HttpOnly; Secure; SameSite=Lax; Expires=Wed, 22 Jan 2025 12:34:56 GMT
  /login/google:
    get:
      tags: [Auth]
      description: Set the state and a codeVerifier in the cookie and redirect the user to the google oAuth url. Google flow uses PKCE
      responses:
        302:
          description: redirect
          headers:
            Location:
              description: https://accounts.google.com/o/oauth2/v2/auth?response_type=code&client_id=some_id&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fapi%2Fv1%2Flogin%2Fgoogle%2Fcallback&state=123456&code_challenge_method=S256&code_challenge=ungWv48Bz-pBQUDeXa4iI7ADYaOWF3qctBD_YfIAFa0&scope=openid+profile
              schema:
                type: string
  /login/google/callback:
    get:
      tags: [Auth]
      description: "google callback flow"
      parameters:
        - name: state
          in: query
          required: true
          schema:
            default: same_state
            type: string
            description: The state that was generated in /login/github
        - name: code
          in: query
          required: true
          schema:
            default: 123456
            type: string
            description: The code that will be used to get the accessToken
        - name: google_oauth_state
          in: cookie
          required: true
          schema:
            default: same_state
            type: string
            description: This state have to match the query state
        - name: google_code_verifier
          in: cookie
          required: true
          schema:
            default: some_code_verifier
            type: string
            description: The codeVerifier that was saved in cookie when visiting /login/google
      responses:
        400:
          description: "If any error happens in the auth flow"
          content:
            text/plain:
              example: Bad Request
        302:
          description: Redirects to the homepage after a successful login
          headers:
            Location:
              description: /
              schema:
                type: string
            Set-Cookie:
              description: The session cookie being set.
              schema:
                type: string
                example: session=abc123; Path=/; HttpOnly; Secure; SameSite=Lax; Expires=Wed, 22 Jan 2025 12:34:56 GMT
  /login/getuser:
    get:
      tags: [Auth]
      description: Return the username and avatar_url if the user is logged in
      parameters:
        - in: cookie
          name: session
          required: false
          schema:
            default: some_session_id
            type: string
            description: The session id when the user logged in
      responses:
        200:
          description: the user name avatar url
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    examples:
                      - Eduarte
                  avatar_url:
                    type: string
                    examples:
                      - https:://api.google/my_avatar_image
        401:
          description: In case the user is unauthenticated
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - Unauthorized
        500:
          description: In case a server error happens
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - internal server error
  /login/logout:
    get:
      tags: [Auth]
      description: Logout the user from his current session
      parameters:
        - name: session
          in: cookie
          required: true
          schema:
            default: 465asdasdas454sometoken
            type: string
            description: The session token to logout
      responses:
        302:
          description: Redirects to the homepage after a successful logout
          headers:
            Location:
              description: /
              schema:
                type: string
            Set-Cookie:
              description: The session cookie will be set to empty.
              schema:
                type: string
                example: session=; Path=/; HttpOnly; Secure; SameSite=Lax; Expires=Wed, 22 Jan 2025 12:34:56 GMT
        500:
          description: In case a server error happens
          content:
            text/plain:
              schema:
                type: string
                examples:
                  - internal server error
        400:
          description: "If this route is called without a valid token"
          content:
            text/plain:
              example: Bad Request
